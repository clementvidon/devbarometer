import { z } from 'zod';
import type { LlmPort } from '../core/port/LlmPort';
import { stripCodeFences } from '../../utils/stripCodeFences';
import type {
  SentimentReport,
  WeatherEmoji,
} from '../core/entity/SentimentReport';

const WeatherEmoji = z.enum([
  '‚òÄÔ∏è',
  'üå§Ô∏è',
  '‚õÖ',
  'üå•Ô∏è',
  '‚òÅÔ∏è',
  'üå¶Ô∏è',
  'üåßÔ∏è',
  '‚õàÔ∏è',
  '‚ùÑÔ∏è',
  'üå©Ô∏è',
] as [WeatherEmoji, ...WeatherEmoji[]]);

const SentimentReportSchema = z.object({
  text: z.string().max(200),
  emoji: WeatherEmoji,
  timestamp: z.string().nonempty(),
});

const FALLBACK: SentimentReport = {
  text: 'Rapport indisponible.',
  emoji: '‚òÅÔ∏è',
  timestamp: new Date().toISOString(),
};

function makeMessages(emotionsText: string) {
  return [
    {
      role: 'system' as const,
      content: `
Vous √™tes un m√©t√©orologue sp√©cialis√© dans l'analyse √©motionnelle.
R√©pondez STRICTEMENT un JSON brut avec ces cl√©s :
- "text" : une phrase ‚â§20 mots, style bulletin m√©t√©o, d√©crivant le sentiment global de l'objet "emotions".
- "emoji" : un seul emoji parmi ${WeatherEmoji.options.join(' ')}.
Aucune autre cl√© ou mise en forme.
        `.trim(),
    },
    {
      role: 'user' as const,
      content: `
Voici l'objet "emotions" en JSON:
${emotionsText}

G√©n√©rez le JSON demand√©.
        `.trim(),
    },
  ];
}

export async function generateSentimentReport(
  emotions: Record<string, number>,
  llm: LlmPort,
): Promise<SentimentReport> {
  const emotionsJson = JSON.stringify(emotions);

  try {
    const raw = await llm.run('gpt-4o-mini', makeMessages(emotionsJson));
    const cleaned = stripCodeFences(raw);
    const parsed = JSON.parse(cleaned);
    const valid = SentimentReportSchema.parse({
      ...parsed,
      timestamp: new Date().toISOString(),
    });
    return valid;
  } catch {
    return FALLBACK;
  }
}
