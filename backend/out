diff --git a/backend/src/cmd/generate-static.test.ts b/backend/src/cmd/generate-static.test.ts
index 1fbd9b8..aef2a24 100644
--- a/backend/src/cmd/generate-static.test.ts
+++ b/backend/src/cmd/generate-static.test.ts
@@ -37,13 +37,13 @@ describe('generateStatic', () => {
     );
 
     expect(mockWrite).toHaveBeenCalledWith(
-      expect.stringContaining('headlines.json'),
+      expect.stringContaining('ticker.json'),
       JSON.stringify(['Post A', 'Post B'], null, 2),
       'utf-8',
     );
 
     expect(mockWrite).toHaveBeenCalledWith(
-      expect.stringContaining('aggregated-emotionprofiles.json'),
+      expect.stringContaining('chart.json'),
       JSON.stringify([{ createdAt: '2025-08-03', aggregate: {} }], null, 2),
       'utf-8',
     );
diff --git a/backend/src/cmd/generate-static.ts b/backend/src/cmd/generate-static.ts
index 727617a..b91e860 100644
--- a/backend/src/cmd/generate-static.ts
+++ b/backend/src/cmd/generate-static.ts
@@ -17,12 +17,12 @@ export async function generateStatic() {
   const agent = makeAgentService();
 
   const report = await agent.getLastEmotionProfileReport();
-  const headlines = await agent.getLastTopHeadlines(10);
-  const aggregatedEmotionProfiles = await agent.getAggregatedEmotionProfiles();
+  const ticker = await agent.getLastTopHeadlines(10);
+  const chart = await agent.getAggregatedEmotionProfiles();
 
   save('report.json', report);
-  save('headlines.json', headlines);
-  save('aggregated-emotionprofiles.json', aggregatedEmotionProfiles);
+  save('ticker.json', ticker);
+  save('chart.json', chart);
 }
 
 if (import.meta.url === `file://${process.argv[1]}`) {
diff --git a/backend/src/internal/core/service/AgentService.ts b/backend/src/internal/core/service/AgentService.ts
index 7299d69..54c07a5 100644
--- a/backend/src/internal/core/service/AgentService.ts
+++ b/backend/src/internal/core/service/AgentService.ts
@@ -3,10 +3,7 @@ import { compressEmotionProfiles } from '../../usecase/compressEmotionProfiles.t
 import { fetchRedditPosts } from '../../usecase/fetchRedditPosts.ts';
 import { filterRelevantPosts } from '../../usecase/filterRelevantPosts.ts';
 import { generateEmotionProfileReport } from '../../usecase/generateEmotionProfileReport.ts';
-import type {
-  AggregatedEmotionProfile,
-  EmotionProfile,
-} from '../entity/EmotionProfile.ts';
+import type { EmotionProfile, AggregatedEmotionProfile } from '../entity/EmotionProfile.ts';
 import type { EmotionProfileReport } from '../entity/EmotionProfileReport.ts';
 import type { FetchPort } from '../port/FetchPort.ts';
 import type { LlmPort } from '../port/LlmPort.ts';
@@ -107,13 +104,28 @@ export class AgentService {
   }
 
   async getAggregatedEmotionProfiles(): Promise<
-    { createdAt: string; emotions: AggregatedEmotionProfile['emotions'] }[]
+    {
+      createdAt: string;
+      emotions: AggregatedEmotionProfile['emotions'];
+      tonalities: AggregatedEmotionProfile['tonalities'];
+    }[]
   > {
     const snapshots = await this.persistence.getSnapshots();
 
-    return snapshots.map((s) => ({
-      createdAt: s.createdAt,
-      emotions: s.aggregatedEmotionProfile.emotions,
-    }));
+    return snapshots
+      .filter((s) => {
+        const ok = !!s.aggregatedEmotionProfile;
+        if (!ok) {
+          console.warn(
+            `[getAggregatedEmotionProfiles] Skipping snapshot without aggregate: ${s.createdAt}`,
+          );
+        }
+        return ok;
+      })
+      .map((s) => ({
+        createdAt: s.createdAt,
+        emotions: s.aggregatedEmotionProfile.emotions,
+        tonalities: s.aggregatedEmotionProfile.tonalities,
+      }));
   }
 }
